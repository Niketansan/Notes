Java compiler executes the code from top to bottom. The statements in the code are executed according to the order in which they appear. However, Java provides statements that can be used to control the flow of Java code. Such statements are called control flow statements. It is one of the fundamental features of Java, which provides a smooth flow of program.

Java provides three types of control flow statements.

Decision Making statements
if statements
switch statement
Loop statements
do while loop
while loop
for loop
break statement
continue statement
===========
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and  objects. It simplifies software development and maintenance by providing some concepts:

Object  :

  Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.

An Object can be defined as an instance of a class
Class :

   Collection of objects is called class. It is a logical entity.

A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance :

  When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism :

 If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.

In Java, we use method overloading and method overriding to achieve polymorphism.

Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.



Abstraction :

  Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
  In Java, we use abstract class and interface to achieve abstraction.
 
Encapsulation :

  Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.

  A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.
  
Apart from these concepts, there are some other terms which are used in Object-Oriented design:

Coupling :
  
  Java is an Object-oriented programming language. Coupling in Java plays an important role when you work with Java Classes and Objects. It basically refers to the extent of knowledge one class knows about the other class. So in this article, you will learn all about coupling in java, its various types along with the examples.

Below topics are covered in this tutorial:

Coupling in Java
Types of coupling
Tight coupling
Loose coupling

Tight Coupling:

      It is when a group of classes are highly dependent on one another. This scenario arises when a class assumes too many responsibilities, or when one concern is spread over many classes rather than having its own class. The situation where an object creates another object for its usage, is termed as Tight Coupling. The parent object will be knowing more about the child object hence the two objects are called as tightly coupled. The dependency factor and the fact that the object cannot be changed by anybody else helps it to achieve the term, tightly coupled.



Loose Coupling: 
      When an object gets the object to be used from external sources, we call it loose coupling. In other words, the loose coupling means that the objects are independent. A loosely coupled code reduces maintenance and efforts. This was the disadvantage of tightly coupled code that was removed by the loosely coupled code. Letâ€™s take a look at some of the examples of loose coupling in Java.
   

Cohesion :
  Cohesion in Java is the Object-Oriented principle most closely associated with making sure that a class is designed with a single,
 well-focused purpose. In object-oriented design, cohesion refers to how a single class is designed. 
 
 The advantage of high cohesion is that such classes are much easier to maintain (and less frequently changed) than classes with low cohesion. Another benefit of high cohesion is that classes with a well-focused purpose tend to be more reusable 
 than other classes.


Association :
	In Java, two types of Association are possible:

	IS-A Association
	HAS-A Association
	Aggregation
	Composition
Association in Java defines the connection between two classes that are set up through their objects. Association manages one-to-one, one-to-many, and many-to-many relationships. In Java, the multiplicity between objects is defined by the Association. It shows how objects communicate with each other and how they use the functionality and services provided by that communicated object. Association manages one-to-one, one-to-many, many-to-one and many-to-many relationships.


Aggregation :

In Java, the Aggregation association defines the HAS-A relationship. Aggregation follows the one-to-one or one-way relationship. If two entities are in the aggregation composition, and one entity fails due to some error, it will not affect the other entity.

Composition :

, Composition represents the part-of relationship. When there is an aggregation between two entities, the aggregate object can exist without the other entity, but in the case of Composition, the composed object can't exist. To learn more about Composition,


    Acess-specificer :
	
	 public  it is accesible to every one 
	
	 private it is accesible to  with this class ,
	 
	 protected it is accesible to  with class with in package and subclass of other package
	 
	 default it is accesible to with in the class with in package
	 
	 
	 Return Type:
	 
	  all primitives  types ., void , class 
	  
	  
	 class can contains instance variable , static variables , constructors,
	  instance block, static block, instance methods or normal methods, static
	  method ,
	  
	  import
	  
	  How to create object for class synatx
	  
	  <class-Name> <ref-variablee-name> = new <class-Name>();
	  
	  <ref-variablee-name> will call has object
	  
	  <access-specifier> <returntype> <method-name>(){
	  
	  }
	  
	  <obj>.<method-name>();
	  int i =1
	    if(true){    i == 2  --false or true
	    
	    }
	  
	Assume you have class called Calculator , it should has add , sub , multiply , divison method which has return result , each method has to take two paramters 
	
	lastly create a object for that class and print the output
	
	class Calcu {
	
	
	int add(int a , int b){
	
	 return a+b;
	}
	
	main(){
	
	Calculator  c = new Calculator();
	
	int result = c.add(1,2);
	sysout(result);
	
	}
	
	}